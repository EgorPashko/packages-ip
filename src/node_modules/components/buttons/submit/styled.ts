import styled, {
	keyframes,
	css,
	FlattenSimpleInterpolation,
} from 'styled-components';

import { IconStyled } from '../../icon';
import { SubmitButtonState } from 'components/buttons/submit/submit-button-state';
import { submitConstants } from 'components/buttons/submit/constants';

import { StyledButtons } from '../styled-buttons';

type Container = { [key in SubmitButtonState]: FlattenSimpleInterpolation };

const rotating = keyframes`
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
`;

const LoadingStyles = css`
	min-width: ${submitConstants.sizeLoader}px;
	height: ${submitConstants.sizeLoader}px;
	border: 2px solid gray;
	border-color: #bbbbbb;
	font-size: 0;
	border-left-color: ${submitConstants.loaderColor};
	border-top-color: ${submitConstants.loaderColor};
	border-radius: 40px;
	background: white;
	cursor: default !important;
	animation: ${rotating} 2s 0.25s linear infinite;
	:focus {
		box-shadow: none;
	}
	:active {
		background: white;
	}
	:hover {
		color: white;
		background: white;
	}
`;

const EmptyStyles = css`
	transition: all 0.5s ease;
`;

const SuccessStyles = css`
	background-color: rgb(102, 189, 90, 20%);
	color: ${submitConstants.successTextColor};
	cursor: default !important;
	${IconStyled.Icon} {
		path {
			fill: ${submitConstants.successTextColor};
		}
		:hover {
			box-shadow: none;
		}
	}
	:focus {
		box-shadow: none;
	}
	:hover {
		background-color: rgb(102, 189, 90, 20%);
	}
`;

const FailedStyles = css`
	background: ${submitConstants.failedBackground};
	color: ${submitConstants.failedTextColor};
	cursor: default !important;

	:hover {
		background: ${submitConstants.failedBackground};
	}
	:focus {
		box-shadow: none;
	}
`;

const container: Container = {
	Default: EmptyStyles,
	Loading: LoadingStyles,
	Success: SuccessStyles,
	Failed: FailedStyles,
};

export const Submit = styled(StyledButtons.Button.Primary)<{
	state: SubmitButtonState;
}>`
	transition: all 0.25s ease;
	${props => container[props.state]}
`;
